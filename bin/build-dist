#!/usr/bin/env bash

set -e -u -o pipefail

: "${BUILD_DIR:=build_dir}"

main() (
    if   can-run-dzil-build; then dzil-build
    elif can-run-minil-build; then minil-build
    elif [[ -e Build.PL ]]; then build-pl
    elif [[ -e Makefile.PL ]]; then std-perl-build
    fi
)

SUCCESS=0
FAILURE=1

can-run-authoring-tool () {
	local file="$1"
	local tool="$2"

	# file doesn't exist ? => don't
	# is authoring tool available ? => run
	# does build file exist ? => don't
	# othwerwise run and fail

	[[ -e "$file"     ]] || return $FAILURE
	which "$tool"        && return $SUCCESS
	[[ -e Build.PL    ]] && return $FAILURE
	[[ -e Makefile.PL ]] && return $FAILURE

	return $SUCCESS
}

can-run-dzil-build() {
	can-run-authoring-tool dist.ini dzil
}

can-run-minil-build() {
	can-run-authoring-tool minil.toml minil
}

dzil-build() (
    dzil build --no-tgz --in "$BUILD_DIR"
)

minil-build() (
    rm -rf "$BUILD_DIR"
    minil build

    # TODO: It looks like minil doesn't accept a build directory name, so we
    # just find the last created dir and use that.
    # shellcheck disable=SC2012
    dir=$(
        ls -td -- */ |
            head -n 1 |
            cut -d'/' -f1
    )
    mv "$dir" "$BUILD_DIR"
)

build-pl() (
    rm -rf "$BUILD_DIR"

    perl Build.PL
    ./Build clean
    ./Build manifest
    ./Build distdir

    # Module::Build does not support a build directory, so we have to find
    # the last created dir and use that.
    dir=$(perl -MModule::Build -e 'print Module::Build->resume->dist_dir;')
    mv "$dir" "$BUILD_DIR"
)

std-perl-build() (
    rm -rf "$BUILD_DIR"
    perl Makefile.PL
    make
    [[ -e MANIFEST.SKIP ]] &&
        make manifest
    make distdir

    # same as with minil
    # shellcheck disable=SC2012
    dir=$(
        ls -td -- */ |
            head -n 1 |
            cut -d'/' -f1
    )
    mv "$dir" "$BUILD_DIR"
)

main "$@"
